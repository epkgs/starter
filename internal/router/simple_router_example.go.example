package router

import (
	"github.com/gin-gonic/gin"
	"github.com/limitcool/starter/configs"
	"github.com/limitcool/starter/internal/controller"
	"github.com/limitcool/starter/internal/middleware"
	"github.com/limitcool/starter/internal/pkg/enum"
	"github.com/limitcool/starter/internal/repository"
)

// RegisterSimpleRoutes 注册简单模式的路由
// 这是一个示例函数，展示如何在简单模式下注册路由
// 注意：这个文件中的控制器方法只是示例，实际使用时需要根据您的控制器实现进行调整
// 这个文件不会被实际使用，只是作为参考示例
func RegisterSimpleRoutes(
	r *gin.Engine,
	config *configs.Config,
	controllers *controller.ControllerInstances,
	userRepo *repository.UserRepo,
) {
	// 获取用户模式
	userMode := enum.GetUserMode(config.Admin.UserMode)

	// 只有在简单模式下才使用简化路由
	if userMode != enum.UserModeSimple {
		return
	}

	// API 路由组
	api := r.Group("/api/v1")

	// 公共路由
	public := api.Group("")
	{
		// 用户登录
		// 注意：这些方法名称是示例，实际使用时需要根据您的控制器实现进行调整
		public.POST("/login", controllers.UserController.UserLogin)
		public.POST("/admin/login", controllers.AdminUserController.AdminUserLogin)

		// 其他公共接口...
	}

	// 需要认证的路由
	authenticated := api.Group("", middleware.JWTAuth(config))

	// 管理员路由 - 使用简化的管理员检查中间件
	admin := authenticated.Group("/admin", middleware.SimpleAdminCheck(userRepo))
	{
		// 用户管理
		// 注意：这些方法名称是示例，实际使用时需要根据您的控制器实现进行调整
		admin.GET("/users", nil) // 示例：获取用户列表
		admin.POST("/users", nil) // 示例：创建用户
		admin.GET("/users/:id", nil) // 示例：获取用户详情
		admin.PUT("/users/:id", nil) // 示例：更新用户
		admin.DELETE("/users/:id", nil) // 示例：删除用户

		// 系统设置
		admin.GET("/settings", nil) // 示例：获取系统设置
		admin.PUT("/settings", nil) // 示例：更新系统设置

		// 其他管理员接口...
	}

	// 普通用户路由 - 使用简化的用户检查中间件
	user := authenticated.Group("/user", middleware.SimpleUserCheck(userRepo))
	{
		// 用户个人信息
		// 注意：这些方法名称是示例，实际使用时需要根据您的控制器实现进行调整
		user.GET("/profile", nil) // 示例：获取用户个人信息
		user.PUT("/profile", nil) // 示例：更新用户个人信息
		user.PUT("/password", nil) // 示例：修改密码

		// 其他用户接口...
	}
}
